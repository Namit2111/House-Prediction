# -*- coding: utf-8 -*-
"""Predicting house price.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nIbM3g7iygScwlMYc82gw2Tq0uoB19ZI
"""

import numpy as np 
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import re
from sklearn.metrics import r2_score, mean_absolute_error, mean_squared_error 
from sklearn.datasets import load_boston
from sklearn.model_selection import train_test_split

from sklearn.linear_model import LinearRegression

"""Problem:
Given a dataset that describr house in boston ,Predict house price based on given feature

CREATING DATA FRAME
"""

boston = load_boston()
df = pd.DataFrame(boston.data)

"""EXPLORATORY DATA ANALYST"""

df.head()

"""ADDING COLUMNS"""

df.columns = boston.feature_names

df.head()

"""column info

• CRIM per capita crime rate by town

• ZN proportion of residential land zoned for lots over 25,000 sq.ft.

• INDUS proportion of non-retail business acres per town

• CHAS Charles River dummy variable (= 1 if tract bounds river; 0 otherwise)

• NOX nitric oxides concentration (parts per 10 million)

• RM average number of rooms per dwelling

• AGE proportion of owner-occupied units built prior to 1940

• DIS weighted distances to five Boston employment centres

• RAD index of accessibility to radial highways

• TAX full-value property-tax rate per 10,000usd

• PTRATIO pupil-teacher ratio by town

• B 1000(BK-0.63)^2 where Bk is the proportion of blacks by town

• LSTAT % lower status of the population

ADD THE TARGET COL INTO DATAFRAME
"""

df['PRICE'] = boston.target

df.head()

df.tail()

df.shape

df.columns

df.dtypes

df.nunique()

df.isnull()

df.isnull().sum()

df.describe()

df.corr

plt.figure(figsize=(10,10))
sns.heatmap(data=df.corr(),annot = True,cmap='Greens')

sns.pairplot(df,height = 5)

#Plot a Boxplot
plt.figure(figsize=(50,50))
df.boxplot()

#Min price
df.PRICE.min()

#MAX price
df.PRICE.max()

#SD
df.PRICE.std()

"""EXPORTING DATASET"""

df.to_csv('boston_dataset.csv',)

"""ML - LR"""

df.head()

x = np.array(df.drop('PRICE',axis=1))
y = np.array(df.PRICE)

#x = boston.data
#y = boston.target

"""SPLITTING THE DATA"""

x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.2,random_state=42)

len(x_train)

len(y_train)

"""CHOSSING THE MODEL"""

model = LinearRegression()

"""FITIING/TRAIN THE MODEL"""

model.fit(x_train,y_train)

#intercept value
model.intercept_

#coff value
model.coef_

"""PREDICTION"""

y_test

y_pred = model.predict(x_test)

y_pred

"""TESTING MODEL PERFORMANCE"""

model.score(x_test,y_test)

#R squared
r2_score(y_test,y_pred)

#MSE
mean_squared_error(y_test,y_pred)

#MAE
mean_absolute_error(y_test,y_pred)

#RMSE
np.sqrt(mean_squared_error(y_test,y_pred))

plt.scatter(y_test,y_pred) 
plt.xlabel("Actual Price") 
plt.ylabel("Predicted Price")
plt.grid()
plt.plot([min(y_test),max(y_test)], [min(y_pred), max(y_pred)], color='red') 
plt.title('Actual Price V/S Predicted Price')